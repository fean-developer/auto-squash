name: Build and Lint

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: ‚ú® Build, Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: üîÑ Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: üîµ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üìÜ Instalar depend√™ncias
        run: npm ci

      - name: üõ†Ô∏è Compilar TypeScript
        run: npm run build

      - name: üîé Lint nos arquivos
        run: |
          npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
          npx eslint src --ext .ts

      # Adicione testes aqui se quiser, exemplo:
      # - name: ‚úÖ Rodar testes
      #   run: npm test

      - name: üìã Verificar dist/
        run: ls -l dist


      - name: Getting organization name
        id: get_org_name
        run: |
          ORG_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          echo "ORG_NAME=$ORG_NAME" >> $GITHUB_OUTPUT


      - name: Get the latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          LAST_TAG=$(git tag --list "v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)
          if [ -z "$LAST_TAG" ]; then LAST_TAG="v1.0.0"; fi
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          

      - name: Analisys type of commit
        id: analisys_commit
        run: |
          LAST_TAG=${{ steps.get_latest_tag.outputs.last_tag }}
          if [ -z "$LAST_TAG" ]; then LAST_TAG="v1.0.0"; fi

          COMMITS=$(git log -3 --pretty=format:"%B")

          if echo "$COMMITS" | grep -Eiq "^BREAKING CHANGE"; then
          BUMP="major"
          elif echo "$COMMITS" | grep -Eiq "^feat(\([a-zA-Z0-9_-]+\))?:"; then
            BUMP="minor"
          elif echo "$COMMITS" | grep -Eiq "^fix(\([a-zA-Z0-9_-]+\))?:|^refactor(\([a-zA-Z0-9_-]+\))?:"; then
            BUMP="patch"
          else
            BUMP="patch"
          fi
          echo "BUMP=$BUMP" >> $GITHUB_OUTPUT

      - name: Creating release tag
        id: create_release_tag
        env:
          BUMP: ${{ steps.analisys_commit.outputs.BUMP }}
        run: |
          LAST_TAG=${{ steps.get_latest_tag.outputs.last_tag }}
          if [ -z "$LAST_TAG" ]; then LAST_TAG="v1.0.0"; fi

          # Extrai vers√µes major, minor e patch
          MAJOR=$(echo "$LAST_TAG" | cut -d. -f1 | sed 's/^v//')
          MINOR=$(echo "$LAST_TAG" | cut -d. -f2)
          PATCH=$(echo "$LAST_TAG" | cut -d. -f3)

          # Incrementa a vers√£o de acordo com o tipo de commit
          if [ "$BUMP" = "major" ]; then
            MAJOR=v$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
        
      - name: Publishing release tag
        env:
          NEW_TAG: ${{ steps.create_release_tag.outputs.NEW_TAG }}
          GITHUB_TOKEN: ${{ secrets.USR_DEFAULT_TOKEN }}
        run: |
          echo "üî¢ Criando tag: $NEW_TAG"
      
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$NEW_TAG"
      
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin "$NEW_TAG"
      
          echo "üîê Autenticando CLI do GitHub"
          echo "$GITHUB_TOKEN" | gh auth login --with-token
      
          echo "üöÄ Criando release para a tag: $NEW_TAG"
          gh release create "$NEW_TAG" --generate-notes --title "Release $NEW_TAG"
      
          # Criar ou atualizar a tag major (ex: v1)
          MAJOR=$(echo "$NEW_TAG" | cut -d. -f1)
          echo "üîÅ Atualizando tag major: $MAJOR"
      
          git tag -f "$MAJOR" "$NEW_TAG"
          git push origin "$MAJOR" --force